/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/config.js":
/*!***********************!*\
  !*** ./src/config.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Project1: () => (/* binding */ Project1),\n/* harmony export */   Project2: () => (/* binding */ Project2),\n/* harmony export */   Project3: () => (/* binding */ Project3),\n/* harmony export */   Project4: () => (/* binding */ Project4),\n/* harmony export */   Project5: () => (/* binding */ Project5),\n/* harmony export */   buttons: () => (/* binding */ buttons),\n/* harmony export */   firstThreeTaskFields: () => (/* binding */ firstThreeTaskFields),\n/* harmony export */   newProjectFieldAttributes: () => (/* binding */ newProjectFieldAttributes),\n/* harmony export */   priorityTaskField: () => (/* binding */ priorityTaskField),\n/* harmony export */   priorityTaskFieldLabel: () => (/* binding */ priorityTaskFieldLabel),\n/* harmony export */   projectMapping: () => (/* binding */ projectMapping),\n/* harmony export */   projectsListAttributes: () => (/* binding */ projectsListAttributes),\n/* harmony export */   projectsListText: () => (/* binding */ projectsListText),\n/* harmony export */   statusTaskField: () => (/* binding */ statusTaskField),\n/* harmony export */   titles: () => (/* binding */ titles)\n/* harmony export */ });\nconst projectsListText = {\n    p1: \"Her Project\",\n    p2: \"His Project\",\n    p3: \"Their Project\",\n    p4: \"Our Project\",\n    p5: \"My Project\"\n}\n\n\nconst titles = {\n    'projects-title': {\n        position: \"left\",\n        image: \"./img/folders-multiple.svg\",\n        alt: \"multiple folders icon\",\n        'text-class': \"projects-title-text\",\n        text: \"Projects\"\n\n    },\n    'each-task-title': {\n        position: \"right\",\n        image: \"./img/calendar-check.svg\",\n        alt: \"calendar with check mark icon\",\n        text: \"Task\"\n    }\n}\n\n\nconst buttons = {\n    'new-project': {\n        position: \"left\",\n        id: \"new-project\",\n        text: \"+ New Project\"\n    },\n    'delete-project': {\n        position: \"left\",\n        id: \"delete-project\",\n        text: \"Delete Project\"\n    },\n    'new-task': {\n        position: \"middle\",\n        id: \"new-task\",\n        text: \"+ New Task\"\n    },\n    'save-task': {\n        position: \"right\",\n        id: \"save-task\",\n        text: \"Save\"\n    },\n    'delete-task': {\n        position: \"right\",\n        id: \"delete-task\",\n        text: \"Delete Task\"\n    }\n}\n\n\nconst projectsListAttributes =  {\n    image: \"./img/arrow-right.svg\",\n    alt: \"arrow pointing right\"\n}\n \n\nconst newProjectFieldAttributes = {\n    for: \"add-new-project\",\n    type: \"text\",\n    id: \"add-new-project\",\n    placeholder: \"+ New Project\"\n}\n\n\nconst Project1 = {\n    'Project': {\n        position: \"middle\",\n        image: \"./img/folder-arrow-down.svg\",\n        alt: \"arrow pointing right icon\",\n        text: \"Her Project\"\n    },\n    '0': {\n        'task-edit': \"Edit\",\n        'task-title': \"Task 1 Title\",\n        'task-description': \"Diam maecenas ultricies mi eget mauris pharetra et. Aliquam vestibulum morbi blandit cursus risus at ultrices.\",\n        'task-duedate': \"12/06/2023\",\n        'priority-level': \"high\",\n        'status': \"In Progress\"\n    },\n    '1': {\n        'task-edit': \"Edit\",\n        'task-title': \"Task 2 Title\",\n        'task-description': \"In fermentum et sollicitudin ac orci phasellus. Risus feugiat in ante metus dictum.\",\n        'task-duedate': \"12/15/2023\",\n        'priority-level': \"medium\",\n        'status': \"Complete\"\n    },\n    '2': {\n        'task-edit': \"Edit\",\n        'task-title': \"Task 3 Title\",\n        'task-description': \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n        'task-duedate': \"12/18/2023\",\n        'priority-level': \"medium\",\n        'status': \"In Progress\"\n    },\n    '3': {\n        'task-edit': \"Edit\",\n        'task-title': \"Task 4 Title\",\n        'task-description': \"Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\",\n        'task-duedate': \"01/04/2024\",\n        'priority-level': \"low\",\n        'status': \"Not Started\"\n    }\n}\n\n\nconst Project2 = {\n    'Project': {\n        position: \"middle\",\n        image: \"./img/folder-arrow-down.svg\",\n        alt: \"arrow pointing right icon\",\n        text: \"His Project\"\n    },\n    '0': {\n        'task-edit': \"Edit\",\n        'task-title': \"Task 1 Title\",\n        'task-description': \"Diam maecenas ultricies mi eget mauris pharetra et. Aliquam vestibulum morbi blandit cursus risus at ultrices.\",\n        'task-duedate': \"12/06/2023\",\n        'priority-level': \"high\",\n        'status': \"In Progress\"\n    },\n    '1': {\n        'task-edit': \"Edit\",\n        'task-title': \"Task 2 Title\",\n        'task-description': \"In fermentum et sollicitudin ac orci phasellus. Risus feugiat in ante metus dictum.\",\n        'task-duedate': \"12/15/2023\",\n        'priority-level': \"medium\",\n        'status': \"Complete\"\n    },\n    '2': {\n        'task-edit': \"Edit\",\n        'task-title': \"Task 3 Title\",\n        'task-description': \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n        'task-duedate': \"12/18/2023\",\n        'priority-level': \"medium\",\n        'status': \"In Progress\"\n    }\n}\n\n\nconst Project3 = {\n    'Project': {\n        position: \"middle\",\n        image: \"./img/folder-arrow-down.svg\",\n        alt: \"arrow pointing right icon\",\n        text: \"Their Project\"\n    },\n    '0': {\n        'task-edit': \"Edit\",\n        'task-title': \"Task 1 Title\",\n        'task-description': \"Diam maecenas ultricies mi eget mauris pharetra et. Aliquam vestibulum morbi blandit cursus risus at ultrices.\",\n        'task-duedate': \"12/06/2023\",\n        'priority-level': \"high\",\n        'status': \"In Progress\"\n    },\n    '1': {\n        'task-edit': \"Edit\",\n        'task-title': \"Task 2 Title\",\n        'task-description': \"In fermentum et sollicitudin ac orci phasellus. Risus feugiat in ante metus dictum.\",\n        'task-duedate': \"12/15/2023\",\n        'priority-level': \"medium\",\n        'status': \"Complete\"\n    }\n}\n\n\nconst Project4 = {\n    'Project': {\n        position: \"middle\",\n        image: \"./img/folder-arrow-down.svg\",\n        alt: \"arrow pointing right icon\",\n        text: \"Our Project\"\n    },\n    '0': {\n        'task-edit': \"Edit\",\n        'task-title': \"Task 1 Title\",\n        'task-description': \"Diam maecenas ultricies mi eget mauris pharetra et. Aliquam vestibulum morbi blandit cursus risus at ultrices.\",\n        'task-duedate': \"12/06/2023\",\n        'priority-level': \"high\",\n        'status': \"In Progress\"\n    }\n}\n\n\nconst Project5 = {\n    'Project': {\n        position: \"middle\",\n        image: \"./img/folder-arrow-down.svg\",\n        alt: \"arrow pointing right icon\",\n        text: \"My Project\"\n    }\n}\n\n\nconst projectMapping = {\n    Project1: Project1,\n    Project2: Project2,\n    Project3: Project3,\n    Project4: Project4,\n    Project5: Project5\n}\n\n\nconst firstThreeTaskFields = {\n    'task-field': {\n        for: \"each-task\",\n        'label-id': \"each-task-label\",\n        'label-text': \"Task Title:\",\n        type: \"text\",\n        'input-id': \"each-task\"\n    },\n    'duedate-field': {\n        for: \"task-duedate\",\n        'label-id': \"task-duedate-label\",\n        'label-text': \"Task Due Date:\",\n        type: \"date\",\n        'input-id': \"task-duedate\"\n\n    },\n    'description-field': {\n        for: \"task-description\",\n        'label-id': \"task-description-label\",\n        'label-text': \"Task Description:\",\n        name: \"task-textarea\",\n        'textarea-id': \"task-description\"\n    }\n}\n\n\nconst priorityTaskFieldLabel = {\n    'label-id': \"task-priority-label\",\n    'label-text': \"Priority:\" \n}\n\n\nconst priorityTaskField = {\n    input1: {\n        type: \"radio\",\n        name: \"priority\",\n        id: \"high\",\n        value: \"high\",\n        for: \"high\",\n        'label-text': \"High\",\n        class: \"priority\",\n        'data-color': \"red\",\n    },\n    input2: {\n        type: \"radio\",\n        name: \"priority\",\n        id: \"medium\",\n        value: \"medium\",\n        for: \"medium\",\n        'label-text': \"Medium\",\n        class: \"priority\",\n        'data-color': \"yellow\",\n\n    },\n    input3: {\n        type: \"radio\",\n        name: \"priority\",\n        id: \"low\",\n        value: \"low\",\n        for: \"low\",\n        'label-text': \"Low\",\n        class: \"priority\",\n        'data-color': \"green\",\n\n    }\n}\n\n\nconst statusTaskField = {\n        class: \"status-field\",\n        for: \"status-dropdown\",\n        'label-id': \"task-status-label\",\n        'label-text': \"Status:\",\n        name: \"status\",\n        'select-id': \"status-dropdown\", \n        options: [\n            {\n                value: \"Not Started\",\n                text: \"Not Started\"\n            },\n            {\n                value: \"In Progress\",\n                text: \"In Progress\",\n            },\n            {\n                value: \"Complete\",\n                text: \"Complete\"\n            }\n        ]\n}\n\n\n\n\n//# sourceURL=webpack://todo-list/./src/config.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config.js */ \"./src/config.js\");\n/* harmony import */ var _page_load_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./page_load.js */ \"./src/page_load.js\");\n\n\n\n\n(0,_page_load_js__WEBPACK_IMPORTED_MODULE_1__.initializeProjectData)();\n\nlet projectMapping = (0,_page_load_js__WEBPACK_IMPORTED_MODULE_1__.loadDataFromLocalStorage)('projectMapping');\n\n// selects the only div element in index.html\nlet pageInfo = document.querySelector('div');\n\n// assigns the div an id of content\npageInfo.id = 'content';\n\n/* DATE \n   creates an element for a localized date string that was converted from a Date object, and appends it to the 'content' div */\nconst processedDate = (0,_page_load_js__WEBPACK_IMPORTED_MODULE_1__.prepareAndCreateDate)();\n(0,_page_load_js__WEBPACK_IMPORTED_MODULE_1__.appendDate)(processedDate, pageInfo);\n\n/* LEFT PANE TITLE AND RIGHT PANE TITLE (RIGHT PANE TITLE IS INITIALLY HIDDEN)\n   creates elements for two processed titles data that is in an array and appends them to the 'content' div */\nconst processedTitles = (0,_page_load_js__WEBPACK_IMPORTED_MODULE_1__.prepareAndCreateObjectData)(_config_js__WEBPACK_IMPORTED_MODULE_0__.titles, _page_load_js__WEBPACK_IMPORTED_MODULE_1__.prepareAndCreateTitleData);\n(0,_page_load_js__WEBPACK_IMPORTED_MODULE_1__.appendTitles)(processedTitles, pageInfo);\n\n/* NEW PROJECT, NEW TASK, AND SAVE BUTTONS (SAVE BUTTON IS INITIALLY HIDDEN)\n   creates elements for processed buttons data and appends them to the 'content' div */\nlet processedButtons = (0,_page_load_js__WEBPACK_IMPORTED_MODULE_1__.prepareAndCreateObjectData)(_config_js__WEBPACK_IMPORTED_MODULE_0__.buttons, _page_load_js__WEBPACK_IMPORTED_MODULE_1__.prepareAndCreateButtonData);\n(0,_page_load_js__WEBPACK_IMPORTED_MODULE_1__.appendButtons)(processedButtons, _config_js__WEBPACK_IMPORTED_MODULE_0__.projectsListAttributes, _config_js__WEBPACK_IMPORTED_MODULE_0__.newProjectFieldAttributes, pageInfo);\n\n// PROJECTS LIST AND NEW PROJECT FIELD ON LEFT PANE\n(0,_page_load_js__WEBPACK_IMPORTED_MODULE_1__.appendProjectsListAndField)(_config_js__WEBPACK_IMPORTED_MODULE_0__.projectsListAttributes, _config_js__WEBPACK_IMPORTED_MODULE_0__.newProjectFieldAttributes, pageInfo);\n\n// TASKS TITLE AND LIST ON MIDDLE PANE\n(0,_page_load_js__WEBPACK_IMPORTED_MODULE_1__.appendTasksTitleAndList)(projectMapping['Project1'], _config_js__WEBPACK_IMPORTED_MODULE_0__.projectsListAttributes, _config_js__WEBPACK_IMPORTED_MODULE_0__.newProjectFieldAttributes, pageInfo);\n\n// TASK FIELDS ON RIGHT PANE\nconst processedThreeTaskFields = (0,_page_load_js__WEBPACK_IMPORTED_MODULE_1__.prepareAndCreateObjectData)(_config_js__WEBPACK_IMPORTED_MODULE_0__.firstThreeTaskFields, _page_load_js__WEBPACK_IMPORTED_MODULE_1__.prepareAndCreateThreeTaskFieldsData);\nconst processedPriorityTaskField = (0,_page_load_js__WEBPACK_IMPORTED_MODULE_1__.prepareAndCreateObjectData)(_config_js__WEBPACK_IMPORTED_MODULE_0__.priorityTaskField, _page_load_js__WEBPACK_IMPORTED_MODULE_1__.prepareAndCreatePriorityTaskFieldData);\n(0,_page_load_js__WEBPACK_IMPORTED_MODULE_1__.appendTaskFields)(processedThreeTaskFields, _config_js__WEBPACK_IMPORTED_MODULE_0__.priorityTaskFieldLabel, processedPriorityTaskField, pageInfo);\n\n(0,_page_load_js__WEBPACK_IMPORTED_MODULE_1__.appendStatusTaskField)(_config_js__WEBPACK_IMPORTED_MODULE_0__.statusTaskField);\n\n\n//# sourceURL=webpack://todo-list/./src/index.js?");

/***/ }),

/***/ "./src/page_load.js":
/*!**************************!*\
  !*** ./src/page_load.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   appendButtons: () => (/* binding */ appendButtons),\n/* harmony export */   appendDate: () => (/* binding */ appendDate),\n/* harmony export */   appendProjectsListAndField: () => (/* binding */ appendProjectsListAndField),\n/* harmony export */   appendStatusTaskField: () => (/* binding */ appendStatusTaskField),\n/* harmony export */   appendTaskFields: () => (/* binding */ appendTaskFields),\n/* harmony export */   appendTasksTitleAndList: () => (/* binding */ appendTasksTitleAndList),\n/* harmony export */   appendTitles: () => (/* binding */ appendTitles),\n/* harmony export */   initializeProjectData: () => (/* binding */ initializeProjectData),\n/* harmony export */   loadDataFromLocalStorage: () => (/* binding */ loadDataFromLocalStorage),\n/* harmony export */   prepareAndCreateButtonData: () => (/* binding */ prepareAndCreateButtonData),\n/* harmony export */   prepareAndCreateDate: () => (/* binding */ prepareAndCreateDate),\n/* harmony export */   prepareAndCreateObjectData: () => (/* binding */ prepareAndCreateObjectData),\n/* harmony export */   prepareAndCreatePriorityTaskFieldData: () => (/* binding */ prepareAndCreatePriorityTaskFieldData),\n/* harmony export */   prepareAndCreateThreeTaskFieldsData: () => (/* binding */ prepareAndCreateThreeTaskFieldsData),\n/* harmony export */   prepareAndCreateTitleData: () => (/* binding */ prepareAndCreateTitleData)\n/* harmony export */ });\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config.js */ \"./src/config.js\");\n\n\n// flags for whether or not tasks are being edited or created\nlet isEditingTask = true;\nlet editingTaskId = null;\n\nlet projectMapping = loadDataFromLocalStorage('projectMapping');\n\n// sets Project 1 data as initial data for page load\nlet selectedProjectData = projectMapping['Project1'];\n\n// flags for whether or not new projects are being added\nlet isProjectButtonListenerAttached = false;\nlet isProjectInputListenerAttached = false;\n\n\n// saves project items and tasks to localStorage every time; key is a string representing the name of the storage slot and data is data to be stored\nfunction saveDataToLocalStorage(key, data) {\n\n    // Local Storage can only store strings\n    localStorage.setItem(key, JSON.stringify(data));\n}\n\n// checks if projectsListText and projectMapping are stored in Local Storage\nfunction initializeProjectData() {\n\n    // Checks if projectsListText is available in Local Storage, either loads it from Local Storage\n    let projectsListText = loadDataFromLocalStorage('projectsListText');\n\n    // or initializes projectsListText using imported object and then saves it to Local Storage\n    if (!projectsListText || Object.keys(projectsListText).length === 0) {\n        projectsListText = _config_js__WEBPACK_IMPORTED_MODULE_0__.projectsListText; \n        saveDataToLocalStorage('projectsListText', projectsListText);\n    }\n\n    // Checks if projectMapping is available in Local Storage,     // either loads it from Local Storage\n    let projectMapping = loadDataFromLocalStorage('projectMapping');\n\n    // or initializes projectMapping using imported object and then saves it to Local Storage\n    if (!projectMapping || Object.keys(projectMapping).length === 0) {\n        projectMapping = _config_js__WEBPACK_IMPORTED_MODULE_0__.projectMapping; \n        saveDataToLocalStorage('projectMapping', projectMapping);\n    }\n}\n\n\n// checks for existing project items and tasks in localStorage when the application is first loaded\nfunction loadDataFromLocalStorage(key) {\n\n    // retrieves data stored in localStorage under the key; result is a JSON string or null if there is no data for the given key \n    const storedData = localStorage.getItem(key);\n\n    // checks if storedData is truthy\n    if (storedData) {\n\n        // parses the JSON string back into a JavaScript object or array\n        return JSON.parse(storedData);\n    }\n\n    // if storedData is null, function returns an empty object\n    return {};\n}\n\n\n/* data function - returns a localized date string that was converted from a Date object, formatted to a specific locale and options */\nfunction prepareAndCreateDate() {\n    return new Date().toLocaleDateString('en-US', { \n        day: 'numeric', \n        month: 'short', \n        year: 'numeric', \n        weekday: 'long' \n    });\n}\n\n\n// utility function - creates simple elements with attributes\nfunction appendAndSetElementAttributes(type, attributes) {\n\n    // creates an element of type\n    const element = document.createElement(type);\n\n    // for each key-value pair in the attributes object\n    Object.entries(attributes).forEach(([key, value]) => {\n\n        // if the key is textContent\n        if (key === 'textContent') {\n\n            // make the element's textContent the value\n            element.textContent = value;\n        } else {\n\n            // if the key is not textContent, set the element's attributes/keys with corresponding values\n            element.setAttribute(key, value);\n        }\n    });\n\n    // returns the newly created element\n    return element;\n}\n\n\n/* utility function - creates HTML elements: rest parameter allows for an indefinite number of arguments \n   representing child elements the rest parameter arguments get treated as an array inside the function */\nfunction createElement(type, properties, ...children) {\n\n    // type is the type of HTML element to be created\n    const element = document.createElement(type);\n        \n    // properties is an object containing key-value pairs where values are property values to be set on the HTML element\n    for (const key in properties) {\n\n        /* for each key, set the corresponding property value on the element \n           ex. if properties is {id: myElement, className: myClass}, element will have id set to myElement and its className set to myClass */\n        element[key] = properties[key];\n    }\n        \n    // iterates over the children array, and for each child, appends the child to the parent element \n    children.forEach(child => {\n\n        if (typeof child === 'string') {\n\n            // if the child is a string, append a new text node from the string \n            element.appendChild(document.createTextNode(child));\n        } else {\n\n        // otherwise, append it as a HTML element\n        element.appendChild(child);\n        }\n    });    \n\n    // returns the HTML element\n    return element;\n}\n\n\n/* utility function - adds event listenrs to DOM elements, making it easier to attach the sam3 event listener to\n   multiple elements or to handle casses where elements are selected by string selectors or directly passed as\n   references \n   callback is the function that will be executed when the event is triggered */\nfunction addEventListenerUtility(selector, eventType, callback) {\n\n    /* handles both string selectors for single elements and direct element references \n       checks if the selector is a string, if it is, document.querySelectorAll(selector) and returns a Nodelist \n       that is then converted to an array; if selector is not a string, it is a direct element reference, \n       creates an array with the element as its only item */\n    const elements = typeof selector === 'string' ? document.querySelectorAll(selector) : [selector];\n\n    // iterates over the array of elements\n    elements.forEach(element => {\n\n        if (element) {\n            // if element exists, calls addEventListener on it \n            element.addEventListener(eventType, callback);\n        }\n    });\n}\n\n\n// DOM function - creates an element for Date string and appends it to the page container\nfunction appendDate(dateData, container) {\n\n    // creates a date div and sets its classes and text content \n    const dateDiv = createElement('div', { \n        className: \"section date middle\", \n        textContent: dateData \n    });\n    \n    // appends the date div to the page\n    container.appendChild(dateDiv);\n}\n\n\n/* data function - takes in a data object made up of key-value pairs, prepareFunction processes it and pushes the processed data into an array */\nfunction prepareAndCreateObjectData(obj, prepareAndCreateFunction) {\n\n    // initializes processedData as empty array\n    const processedData = [];\n\n    // iterates over each key in obj\n    for (const key in obj) {\n\n        // item is assigned the value of the current property being iterated over\n        const item = obj[key];\n\n        // calls prepareFunction, passing it the current key and its value, and pushes the result of the prepareFunction into the processedData array\n        processedData.push(prepareAndCreateFunction(key, item));\n    }\n\n    // returns processedData array\n    return processedData;\n}\n\n\n// data function - prepareData function that processes the title object and returns the processed data\nfunction prepareAndCreateTitleData(key, item) {\n    return {\n    \n        /* processes the key-value pairs of a title object and then returns them, sets object's classes property, \n           sets the src property for an image associated with the current value, sets the image's alt property, sets text content, sets a class for the text */\n        classes: [\"section\", key, item.position],\n        imageSrc: item.image,\n        imageAlt: item.alt,\n        textContent: item.text,\n        textClass: item['text-class'],\n    };     \n}\n\n\n// DOM function - creates elements for the processed titles data and appends them to the page container\nfunction appendTitles(titlesData, container) {\n\n    /* iterates over an array of processed title data/objects, each object includes the title's classes, title's image data, alt text data, and text content */\n    titlesData.forEach(data => {\n\n        /* for each processed object in the array (projects-title or each-task-title), creates a div element, and sets its classes by joining all class names \n           provided in data.classes with a space between the classes */\n        const titleDiv = createElement('div', {\n            className: data.classes.join(' ')\n        });\n\n        // creates an img element, and sets its src and alt attributes according to the processed object \n        const img = appendAndSetElementAttributes('img', {src: data.imageSrc, alt: data.imageAlt});\n\n        /* if data.textClass exists (if textClass is a key in the processed object), uses that value as text content,\n           otherwise, defaults to an empty string as text content */\n        data.textClass ? `${data.textClass}` : '';\n\n        // creates a div for the text content and sets the div's classes and text content \n        const textDiv = appendAndSetElementAttributes('div', {textContent: data.textContent});\n\n        // append img and text content div elements to their container, titleDiv \n        titleDiv.appendChild(img);\n        titleDiv.appendChild(textDiv);\n\n        // append the titleDiv container to the page\n        container.appendChild(titleDiv);\n    });\n}\n\n\n// data function - prepareData function that processes the buttons object and returns the processed data\nfunction prepareAndCreateButtonData(key, item) {\n\n    return {\n\n        /* takes the current key and its value of a button object, processes it, and then returns it\n            sets classes property for the object, sets its id property, sets its text content */\n        classes: [\"section\", key, item.position],\n        id: item.id,\n        textContent: item.text\n    };\n}\n\n\n// DOM function - creates elements for the processed buttons data and appends them to the page container\nfunction appendButtons(buttonsData, listAttributesData, fieldAttributesData, container) {\n\n    /* iterates over an array of button objects, each object includes the button's id and text content, \n       and classes for the div the button is nested into */\n    buttonsData.forEach(data => { \n\n        // creates a button element and sets its id attribute and text content \n        const button = appendAndSetElementAttributes('button', {id: data.id, textContent: data.textContent});\n\n        /* creates a div container for the button, and sets its classes by joining all class names provided in data.classes with a space between them */\n        const buttonDiv = createElement('div', {\n            className: data.classes.join(' ')\n        });\n\n        // appends the button to its container, buttonDiv\n        buttonDiv.appendChild(button);\n\n        // appends the buttonDiv container to the container\n        container.appendChild(buttonDiv);\n    });\n\n    // newTaskButton is assigned to the element whose id is 'new-task'\n    addEventListenerUtility(\"#new-task\", 'click', () => {\n\n        // runs the newTask function when the button is clicked\n        newTask();\n\n        /* attaches an event listener to each of the projects in the projects list, and switch the layout to two panes \n           when any of them are clicked */\n        addEventListenerUtility('li', 'click', switchToTwoPanes);\n    });\n\n\n    // adds a click event listener to saveTaskButton \n    addEventListenerUtility(\"#save-task\", 'click', () => {\n\n        // get the projectName\n        let projectNameText = selectedProjectData['Project'].text;\n\n        // find the project key corresponding to the projectName in projectMapping\n        let projectKey = findProjectKeyByProjectText(projectNameText);\n\n        if (projectKey) {\n\n            /* run the appendTask function if the project key is found, when the button is clicked \n               and appends the edited or new task to the selectedProjectData */\n            appendTask(selectedProjectData, listAttributesData, fieldAttributesData, container);\n        // } else {\n\n            // if project key is not found, the project's been deleted, run appendTask on the first project in projectMapping\n            // let alternateProjectData = Object.keys(projectMapping)[0];\n            // appendTasksTitleAndList(selectedProjectData, listAttributesData, fieldAttributesData, container);\n        }\n    });\n    \n    // adds a click event listener to deleteProjectButton\n    addEventListenerUtility(\"#delete-project\", 'click', () => {\n\n       let projectMapping = loadDataFromLocalStorage('projectMapping');\n\n        let firstProject = Object.values(projectMapping)[0];\n\n        if (selectedProjectData['Project']['text'] === firstProject['Project']['text'] ) {\n            \n            // if the first project is selected for deletion, do not allow and show pop-up\n            alert(\"First project is the default project and cannot be deleted.\")\n        \n        } else {\n            \n            // runs the deleteProject function when the button is clicked\n            deleteProject(selectedProjectData, listAttributesData, fieldAttributesData, container);\n        }\n    });\n}\n\n\n// DOM function - listens for a new project input keyup or button click\nfunction listenForNewProject(listAttributesData, container) {\n\n    // handler function that is triggered when the new project button is clicked or when the Enter key is pressed in the input field\n    const handleAppendNewProject = () => {\n\n        // fetches the input value and trims any whitespace from it\n        let input = container.querySelector(\"#add-new-project\");\n        const trimmedValue = input.value.trim();\n\n        // checks if the trimmed input value is not empty and if not, proceeds to append project data\n        if (trimmedValue) {\n            appendProjectData(listAttributesData, container);\n\n        // if trimmed value is empty, alerts the user to enter a project name\n        } else {\n            alert(\"Enter new project name.\");\n        }\n    };\n\n    // checks if event listener for new project button is not already attached using a flag\n    if (!isProjectButtonListenerAttached) {\n\n        //adds a click event listener to the new project button which triggers the handler function\n        let newProjectButton = container.querySelector(\"#new-project\");\n        newProjectButton.addEventListener('click', handleAppendNewProject);\n\n        // sets the flag to true\n        isProjectButtonListenerAttached = true;\n    }\n\n    // checks if the event listener for the input field is not already attached using another flag\n    if (!isProjectInputListenerAttached) {\n\n        // adds a enter keyup event listener to the input field which triggers the handler function\n        let input = container.querySelector(\"#add-new-project\");\n        input.addEventListener('keyup', (event) => {\n            if (event.key === 'Enter') {\n                handleAppendNewProject();\n            }\n        });\n\n        // sets the flag to true\n        isProjectInputListenerAttached = true;\n    }\n}\n\n\n// data function - removes a specific project \nfunction deleteProject(projectData, listAttributesData, fieldAttributesData, container) {\n\n    let projectMapping = loadDataFromLocalStorage('projectMapping');\n\n    // checks that projectData is not null or undefined\n    if (projectData) {\n        /* converts projectMapping into an array of key value pairs, where each pair represents one \n            one property of projectMapping, iterates through these pairs using a destructuring assignment */\n        let targetObjectKey = Object.entries(projectMapping).find(([key, value]) => \n\n            /* checks each value/object inside projectMapping to see if it has a Project property and if so, \n                whether the text project of this Project matches the text projecty of the Project object of\n                projectData */\n            value.Project && value.Project.text === projectData['Project'].text\n            \n        /* ? presents errors if the previous operation returns undefined \n            [0] access the first element of the array returned by find */\n        )?.[0];\n\n        // removes the project entry from projectMapping\n        delete projectMapping[targetObjectKey];\n\n        saveDataToLocalStorage('projectMapping', projectMapping);\n\n        let projectsListText = loadDataFromLocalStorage('projectsListText');\n\n        // searches for the key in projectsListText that maps to the project name to be deleted\n        let keyToDelete = Object.keys(projectsListText).find(key => projectsListText[key] === projectData['Project'].text);\n\n        // if the key is found\n        if (keyToDelete) {\n\n            // deletes that key-value pair from projectsListText\n            delete projectsListText[keyToDelete];\n\n            saveDataToLocalStorage('projectsListText', projectsListText);\n        }\n\n        projectMapping = loadDataFromLocalStorage('projectMapping');\n\n        // gets just the keys in the projectMapping object\n        const keys = Object.keys(projectMapping);\n\n        // checks if there are any projects left in projectMapping by retrieving the keys and checking their count\n        if (keys.length > 0) {\n\n            // selects the first remaining project by key\n            const firstKey = keys[0];\n\n            // uses the firstKey's data to select projectData for first remaining project\n            const firstProjectData = projectMapping[firstKey];\n\n            // removes the old, pre-deletion projects list\n            const div = container.querySelector('.section.projects-list.left');\n\n            if (div) {\n                div.remove();\n            }\n\n            // updates and displays the projects list and field \n            appendProjectsListAndField(listAttributesData, fieldAttributesData, container);\n\n            // updates and displays the tasks associated with the first project\n            appendTasksTitleAndList(firstProjectData, listAttributesData, fieldAttributesData, container);\n        }\n    }\n}\n\n\n// data function - creates projectData based on user input\nfunction prepareAndCreateProjectData(listAttributesData, container) {\n\n    // gets the new project input field\n    let input = container.querySelector(\"#add-new-project\");\n\n    // checks if the input field has a value and trims off its whitespace\n    if (!input.value.trim()) {\n\n        // alert if input field has no value\n        alert(\"Enter new project name.\");\n    } else {\n\n    // otherwise assign input value to projectName\n    let projectName = input.value.trim();\n\n    let projectsListText = loadDataFromLocalStorage('projectsListText');\n\n    // generates a unique key for projectsListText by first removing and returning last key\n    const lastKey = Object.keys(projectsListText).pop();\n\n    /* gets just the numeric part of the last key, by removing the first character of lastKey, substring should start from index 1\n        and converts the number to an int */\n    const numericPartOfLastKey = parseInt(lastKey.substring(1), 10);\n\n    // increments the numeric part by 1, concatenates p in front, and that is the next key\n    const nextKey = `p${numericPartOfLastKey + 1}`;\n\n    // adds the new project name to projectsListText using nextKey\n    projectsListText[nextKey] = projectName;\n\n    saveDataToLocalStorage('projectsListText', projectsListText);\n\n    let projectMapping = loadDataFromLocalStorage('projectMapping');\n\n    // generates a unique key for projectMapping similar to nextKey by first removing and returning the last key\n    const lastProjectKey = Object.keys(projectMapping).pop();\n\n    // gets just the numeric part of the last key and converts it to an int\n    const numericPartOfLastProjectKey = parseInt(lastProjectKey.replace('Project', ''), 10);\n\n     // increments the numeric part by 1, concatenates Project in front, and that is the nextProjectKey\n    const nextProjectKey = `Project${numericPartOfLastProjectKey + 1}`;\n\n    // creates a new project object with detailed information (position, image, alt text, project name) and adds it to projectMapping using newProjectKey \n    projectMapping[nextProjectKey] = {\n        'Project': {\n            position: \"middle\",\n            image: listAttributesData.image,\n            alt: listAttributesData.alt,\n            text: projectName,\n        },\n    };\n\n    // persists the updated projectMapping to local storage to ensure data is saved across sessions\n    saveDataToLocalStorage('projectMapping', projectMapping);\n\n    // returns an object containing the new project's data, ready for DOM manipulation\n    return {\n        projectName,\n        nextKey,\n        image: listAttributesData.image,\n        alt: listAttributesData.alt \n    };\n}\n}\n\n\n// DOM function - manipulates the DOM using the project data created by prepareAndCreateProjectData\nfunction appendProjectData(listAttributesData, container) {\n\n    // gets the projects list\n    let list = container.querySelector(\"ul\");\n\n    // creates the new project's data based on the user's input\n    const projectData = prepareAndCreateProjectData(listAttributesData, container);\n\n    // checks if projectData exists\n    if (!projectData) return;\n     \n    // destructures the projectData object to extract necessary details for DOM elements\n    const { projectName, nextKey, image, alt } = projectData; \n\n    /* creates a list item li and assigns it to a class with the project's unique key,\n       creates a text node for the project name, \n       appends the image element and text node as its children */\n    const listItem = createElement('li', {className: nextKey},\n\n        // creates an img element for the project and sets its src and alt attributes\n        createElement('img', {src: image, alt: alt}),\n        projectName);\n\n    // appends the newly created list item to the provided list\n    list.appendChild(listItem);\n}\n\n\n/* DOM function - creates li elements for projectsListText data and appends them with their attributes\n   key is the unique identifier for the project; list is the ul element to which the project list item will be appended; listAttributesData\n   is the object containing data for setting attributes on the list item's child elements, like an image */\n   function appendProjectsListItem(key, list, listAttributesData) {\n\n    let projectsListText = loadDataFromLocalStorage('projectsListText');\n\n    // fetches the project name using the key from the projectsListText\n    const projectName = projectsListText[key];\n\n    // creates a text node with projectName as text content\n    let textNode = document.createTextNode(projectName);\n\n    // creates li element, appends img element and text node as children\n    let projectDiv = createElement('li', { className: key },\n\n    // creates and configures the arrow pointing right image, the icon associated with each project\n    createElement('img', {src: listAttributesData.image, alt: listAttributesData.alt}), \n        textNode); \n\n    // adds an event listener to the li element\n    projectDiv.addEventListener(\"click\", () => {\n\n        let projectMapping = loadDataFromLocalStorage('projectMapping');\n\n        // replaces the space in the project name with no space, and this is the key to retrieve the selectedProjectdata\n        let targetObjectKey = Object.entries(projectMapping).find(([key, value]) => \n                value.Project && value.Project.text === projectName\n        )?.[0];\n\n        // retrieves selectedProjectData from projectMapping\n        selectedProjectData = projectMapping[targetObjectKey]; \n    });\n\n    // appends the newly created li element to the ul element\n    list.appendChild(projectDiv);\n}\n\n\n// DOM function - creates elements for the projects list and the new-project field\nfunction appendProjectsListAndField(listAttributesData, fieldAttributesData, container) {\n\n    // creates a div container for the projects list and sets its classes\n    let listDiv = createElement('div', {className: \"section projects-list left\"});\n\n    // creates a ul element for the projects list\n    let list = createElement('ul', {});\n\n    let projectsListText = loadDataFromLocalStorage('projectsListText');\n\n    // loops through projectsListText and calls appendProjectsListItem on each project/key to populate the projects list\n    for (const key in projectsListText) {\n        appendProjectsListItem(key, list, listAttributesData);\n    }\n\n    // append the projects list to the projects list container\n    listDiv.appendChild(list);\n\n    // creates a container for the input field \n    const projectFieldDiv = createElement('div');\n\n    // creates a label element for the input field and sets its for attribute\n    const label = appendAndSetElementAttributes('label', {for: fieldAttributesData.for});\n\n    // creates the input field with type, id, and placeholder attributes from fieldAttributesData key values \n    let input = appendAndSetElementAttributes('input', {\n        type: fieldAttributesData.type,\n        id: fieldAttributesData.id,\n        placeholder: fieldAttributesData.placeholder\n    });\n\n    // appends the label and input to the input field container\n    projectFieldDiv.appendChild(label);\n    projectFieldDiv.appendChild(input);\n\n    // appends the input field container to the projects list container\n    listDiv.appendChild(projectFieldDiv);\n\n    // appends the list container to the page \n    container.appendChild(listDiv);\n\n    // attaches event listeners to the new project input field add new project button\n    listenForNewProject(listAttributesData, container);\n    \n    // makes the projects list item selectable\n    selectProject(listAttributesData, fieldAttributesData, container);\n}\n\n\n// DOM function - creates elements for the tasks project title and tasks list \nfunction appendTasksTitleAndList(projectData, listAttributesData, fieldAttributesData, container) {\n\n    // // clears any existing tasks list div before creating a new one\n    // let existingTasksListDiv = container.querySelector('.tasks-list');\n\n    // if (existingTasksListDiv) {\n\n    //     // removes the existing tasks list div from the DOM\n    //     existingTasksListDiv.remove();\n\n    //     // creates and appends a new div element \n    //     const clearedTasksListDiv = document.createElement('div');\n\n    //     // adds the middle class back to the new div element\n    //     clearedTasksListDiv.classList.add('middle');\n\n    //     // creates and appends a new div element\n    //     const clearedTaskDetailsDiv = document.createElement('div');\n\n    //     // adds a new right class back to the new div element\n    //     clearedTaskDetailsDiv.classList.add('new-right');\n\n    //     // appends the two new div elements to the page \n    //     container.appendChild(clearedTasksListDiv);\n    //     container.appendChild(clearedTaskDetailsDiv);\n    // } \n\n    if (projectData) {\n\n        // assigns tasksTitleData to the value/object associated with projectData['Project'] key */\n        let tasksTitleData = projectData['Project'];\n\n        /* creates a div for the title and sets it classes \n           creates div for the title's text content and sets the div's id \n           appends the img and text div elements to their title container */\n        let titleDiv = createElement('div', {\n            className: \"section project-title tasks-list-project \" + tasksTitleData.position,     \n\n        // creates img element of the folder plus down-pointing arrow icon and sets its src and alt attributes \n         }, createElement('img', {src: tasksTitleData.image, alt: tasksTitleData.alt}), tasksTitleData.text);\n        \n        // appends the titleDiv to the page container\n        container.appendChild(titleDiv);\n\n        // creates a div container for all the tasks in the list\n        const tasksListDiv = createElement('div', {className: 'section tasks-list middle'});\n\n        // iterates through keys/objects inside the projectData object\n        for (let taskKey in projectData) {\n\n            // move on if the key is Project (which contains properties for the title)\n            if (taskKey === 'Project') continue;\n\n            // data assigned to the value/object associated with projectData[taskKey]\n            let data = projectData[taskKey];\n\n            /* creates a div container for \"Edit\", task title, \"Task Description\", \"Task Due Date\", \n               \"Priority Level\", and \"Status\" elements and sets its class and id \n               appends 4 shown elements and 2 hidden elements to the task container */\n            let taskDiv = createElement('div', {className: 'task', id: taskKey},\n                \n                // creates a div for \"Edit\" and sets its class and text content \n                createElement('div', {className: \"task-edit\", textContent: data[\"task-edit\"]}),\n                        \n                // creates a div for the task title key's value and sets its class and text content\n                createElement('div', {className: \"task-title\", textContent: data[\"task-title\"]}),\n            \n                // creates a div for \"Task Description\" and sets its class and text content\n                createElement('div', {className: \"task-description\", textContent: data[\"task-description\"]}),\n            \n                /* creates a div for \"Task Due Date\" and sets its text content and \n                    sets its color class based on the value of its priority-level property */\n                createElement('div', {\n            \n                    /* if the priority-level is high, set its color class to red \n                    if the priority-level is medium, set its color class to yellow\n                    if the priority-level is low, set its color class to green */\n                    className: `task-duedate ${data[\"priority-level\"] === \"high\" ? \"red\" : data[\"priority-level\"] === \"medium\" ? \"yellow\" : \"green\"}`,\n                    textContent: data[\"task-duedate\"]\n                    }),\n            \n                    // creates a div for \"Priority Level\", and sets its text content and classes, including the hide class\n                    createElement('div', {className: `priority-level hide`, textContent: data[\"priority-level\"]}),\n            \n                    // creates a div for \"Status\" and sets its text content and classes, including the hide class\n                    createElement('div', {className: `status hide`, textContent: data[\"status\"]})\n            );\n\n            // adds a click event listener to the Edit div element\n            taskDiv.querySelector('.task-edit').addEventListener('click', function() {\n            \n                // when Edit is clicked\n                isEditingTask = true;\n\n                // gets editingTAskId value from the id attribute of taskEditDiv's parent element\n                editingTaskId = this.parentElement.getAttribute('id');\n            \n                // swtiches layout to three panes\n                switchToThreePanes();\n            \n                // populateFormFields to populate the task form fields with values from the object\n                populateFormFields(projectData, editingTaskId);\n\n                // gets delete task button\n                let deleteTaskButton = document.getElementById('delete-task');\n\n                // adds event listener to delete task button \n                deleteTaskButton.addEventListener('click', () => {\n\n                    // runs deleteTask and assigns updated projectData to projectData\n                    projectData = deleteTask(projectData, editingTaskId, listAttributesData, fieldAttributesData, container);\n                });\n            });\n\n            // appends the task container to the tasks list container \n            tasksListDiv.appendChild(taskDiv);\n        }\n\n        // appends the tasks list container to the page\n        container.appendChild(tasksListDiv);\n    }\n}\n\n\n// utility function - finds the project key of a project in projectMapping using its project name text\nfunction findProjectKeyByProjectText(projectText) {\n\n    let projectMapping = loadDataFromLocalStorage('projectMapping');\n\n    // iterates through the project keys of projectMapping\n    for (let key in projectMapping) {\n\n        // if the Project.text of a project in projectMapping with a specific key matches the project name text\n        if (projectMapping[key]['Project']['text'] === projectText) {\n\n            // return the matching key\n            return key;\n        }\n    }\n\n    // otherwise return null\n    return null;\n}\n\n\n// a prepareData function that processes the firstThreeTaskFields data and returns the processed data\nfunction prepareAndCreateThreeTaskFieldsData(key, item) {\n    return {\n            class: key,\n            labelFor: item.for,\n            labelId: item[\"label-id\"],\n            labelTextContent: item[\"label-text\"],\n            inputType: item.type,\n            textareaName: item.name,\n            inputId: item[\"input-id\"],\n            textareaId: item[\"textarea-id\"]\n    };\n}\n\n\n// a prepareData function that processes the priorityTaskField data and returns the processed data\nfunction prepareAndCreatePriorityTaskFieldData(key, item) {\n    return {\n            type: item.type,\n            name: item.name,\n            id: item.id,\n            value: item.value,\n            for: item.for,\n            \"label-text\": item[\"label-text\"],\n            class: item.class,\n            \"data-color\": item[\"data-color\"]\n    };\n}\n\n\n// DOM function - creates and appends four task fields and a label for the fourth field to the page container\nfunction appendTaskFields(threeTaskFieldsData, fieldLabel, priorityTaskFieldData, container) {\n\n    // creates a form container and sets its classes\n    const formDiv = createElement('div', {className: 'section task-details right'});\n\n    // creates a form and sets its attributes\n    const form = appendAndSetElementAttributes('form', {action: '', method: 'post', id: 'form'});\n\n    // iterates through each object in the firstThreeTaskFields array object\n    threeTaskFieldsData.forEach(data => {\n\n        // for each object, creates a task field div container and set its class\n        const taskFieldDiv = createElement('div', {className: data.class});\n\n        // for each object, create a label and set its attributes and text content\n        const label = appendAndSetElementAttributes('label', {\n            for: data.labelFor, \n            id: data.labelId, \n            textContent: data.labelTextContent\n        });\n\n        // appends each label to each task field div\n        taskFieldDiv.appendChild(label);\n\n        // if the object has a key of inputType, creates an input element and sets its attributes \n        if (data.inputType) {\n            const input = appendAndSetElementAttributes('input', {\n                type: data.inputType, \n                id: data.inputId\n            });\n            // appends the input element to its task field div container\n            taskFieldDiv.appendChild(input);\n        }\n\n        // if the object has a key of textareaName, creates a textarea element and set its attributes \n        if (data.textareaName) {\n            const textarea = appendAndSetElementAttributes('textarea', {\n                name: data.textareaName, \n                id: data.textareaId\n            });\n            // appends the textarea to its task field div container\n            taskFieldDiv.appendChild(textarea);\n        }\n        // appends each task field div to the form element\n        form.appendChild(taskFieldDiv);\n    });\n\n    // creates div container for the Priority main label, input, and input label elements\n    const priorityTaskFieldDiv = createElement('div', {className: 'priority-field'});\n\n    // creates main label element with \"Priority\" as text content \n    const priorityTaskFieldLabel = appendAndSetElementAttributes('label', {\n        id: fieldLabel[\"label-id\"],\n        textContent: fieldLabel[\"label-text\"]\n    });\n\n    // appends main label to the div container\n    priorityTaskFieldDiv.appendChild(priorityTaskFieldLabel);\n\n    /* iterates through the priorityTaskFieldData object array, and for each object, \n        creates an input element and set its attributes */\n    priorityTaskFieldData.forEach(data => {\n        const input = appendAndSetElementAttributes('input', {\n            type: data.type,\n            name: data.name, \n            id: data.id,\n            value: data.value\n        });\n\n        // for each object, creates an input label element and set its attributes\n        const otherLabel = createElement('label', {\n            htmlFor: data.for,\n            className: data.class,\n            textContent: data[\"label-text\"]\n        });\n\n        // for each input label, sets the color for each radio \n        otherLabel.dataset.color = data[\"data-color\"];\n\n        // appends each radio input to the div container\n        priorityTaskFieldDiv.appendChild(input);\n        \n        // appends each otherLabel to the div container\n        priorityTaskFieldDiv.appendChild(otherLabel);\n    });\n\n    // appends the div container to the form element\n    form.appendChild(priorityTaskFieldDiv);\n\n    // appends the form element to the form container\n    formDiv.appendChild(form);\n\n    // appends the form container to the page container\n    container.appendChild(formDiv);\n}\n\n\n// DOM function - creates and appends the status dropdown field to the page container\nfunction appendStatusTaskField(statusTaskFieldData) {\n\n    // returns the form element\n    const form = document.getElementById(\"form\");\n\n    // iterates through the array keyed to \"options\" in the statusTaskFieldData object\n    const optionsElements = statusTaskFieldData.options.map(option => \n\n        // for each element in the options array, creates an option element and sets its attributes\n        appendAndSetElementAttributes('option', {\n            value: option.value, \n            textContent: option.text\n        })\n    );\n\n    // creates a select element and sets its attributes and options\n    const select = createElement('select', \n        {name: statusTaskFieldData.name, id: statusTaskFieldData[\"select-id\"]}, \n        ...optionsElements);\n\n    // creates a label element and sets its attributes\n    const label = appendAndSetElementAttributes('label', {\n        for: statusTaskFieldData.for,\n        id: statusTaskFieldData[\"label-id\"],\n        textContent: statusTaskFieldData[\"label-text\"]\n    });\n\n    // creates a div container for the select (with its options) and label elements \n    const statusTaskFieldDiv = createElement('div', \n        {className: statusTaskFieldData.class}, \n        label, \n        select);\n\n    // appends the status dropdown div container to the page container\n    form.appendChild(statusTaskFieldDiv);\n}\n\n\n// DOM function - switches from two panes to three panes \nfunction switchToThreePanes() {\n    const stylesheet = document.getElementById('stylesheetToSwitch');\n\n    if (stylesheet.href.endsWith('style2.css')) {\n        stylesheet.href = 'style.css';\n    }\n} \n\n\n// DOM function - switches from two panes to three panes \nfunction switchToTwoPanes() {\n    const stylesheet = document.getElementById('stylesheetToSwitch');\n\n    if (stylesheet.href.endsWith('style.css')) {\n        stylesheet.href = 'style2.css';\n    }\n} \n\n\n// DOM function - populates the form fields with the data for the task selected\nfunction populateFormFields(projectData, taskId) {\n\n    let taskData = projectData[taskId];\n\n    let taskTitle = taskData[\"task-title\"];\n\n    let taskDescription = taskData['task-description'];\n\n    let taskDueDate = taskData['task-duedate'];\n\n    if (taskDueDate.includes('/')) {\n        \n        //splits the taskDueDate string into an array of substrings based on \"/\" as the delimiter\n        const dateParts = taskDueDate.split('/');\n        \n        /* regex for the third substring, YYYY, then \"-\", then the first substring, MM, padded with a '0'\n           if MM is a single digit, then \"-\", and lastly the second substring, DD, padded with a '0'\n           if DD is a single digit */\n        taskDueDate = `${dateParts[2]}-${dateParts[0].padStart(2, '0')}-${dateParts[1].padStart(2, '0')}`;\n    }\n\n    let taskPriority = taskData['priority-level'];\n\n    let taskStatus = taskData['status'];\n\n    // returns the field element with the id of \"each-task\" in the right pane\n    const eachTaskField = document.getElementById('each-task');\n\n    // returns the field element with the id of \"task-description\" in the right pane\n    const descriptionField = document.getElementById('task-description');\n\n    // returns the field element with the id of \"task-duedate\" in the right pane\n    const dueDateField = document.getElementById('task-duedate');\n\n    // returns the field element with the name of \"priority\"  in the right pane\n    const priorityFields = document.getElementsByName('priority');\n\n    // assigns the value of taskTitle in the middle pane to eachTaskField in the right pane\n    eachTaskField.value = taskTitle;\n\n    // assigns the value of taskDescription in the middle pane to descriptionField in the right pane\n    descriptionField.value = taskDescription;\n\n    // assigns the value of taskDueDate in the middle pane to dueDateField in the right pane\n    dueDateField.value = taskDueDate;\n\n    // loop through the three priority fields\n    for (let i = 0; i < priorityFields.length; i++) {\n        \n        /* if the priority field value exactly matches the text content of the \"priority-level\" element,\n            check off that priority field value and break from this loop */\n        if (priorityFields[i].value === taskPriority) {\n            priorityFields[i].checked = true;\n            break;\n        }\n    }\n\n    // returns the element with the id of \"status-dropdown\" in the right pane\n    const statusSelect = document.getElementById('status-dropdown');\n\n    // assigns the value of taskStatus in the middle pane to statusSelect in the right pane\n    statusSelect.value = taskStatus;\n}\n\n\n// data function - removes a specific task from a project's data structure and updates the display accordingly\nfunction deleteTask(projectData, editingTaskId, listAttributesData, fieldAttributesData, container) {\n\n    // checks if editingTaskId flag is not null, meaning there is a specific task selected for deletion\n    if (editingTaskId !== null) {\n\n        // deletes the task from projectData, removing the key-value pair where the key is editingTaskId from the projectData object\n        delete projectData[editingTaskId];\n\n        // gets the project name of the updated projectData\n        let projectNameText = projectData['Project'].text;\n        \n        // gets the project key for the project in projectMapping that matches the updated projectData\n        let projectKey = findProjectKeyByProjectText(projectNameText);\n\n        let projectMapping = loadDataFromLocalStorage('projectMapping');\n        \n        // uses the key to update projectMapping\n        projectMapping[projectKey] = projectData;\n        \n        saveDataToLocalStorage('projectMapping', projectMapping);\n\n        // resets the editing state to indicate no task is currently selected for editing or deletion\n        editingTaskId = null;\n\n        // refreshes the task list displayed in the container\n        appendTasksTitleAndList(projectData, listAttributesData, fieldAttributesData, container);\n\n    // if there is no editingTaskId, changes the UI layout to reflect state where no task is selected    \n    } else {\n\n        switchToTwoPanes();\n    }\n\n    // ensures that UI is always reset\n    switchToTwoPanes();\n\n    return projectData;\n}\n\n\n// DOM function - creates a new task in the DOM\nfunction newTask() {\n    isEditingTask = false;\n    editingTaskId = null;\n\n    // switches from two panes to three panes\n    switchToThreePanes();\n\n    // returns all the task fields and makes their values empty strings \n    let eachTaskField = document.getElementById('each-task');\n\n    if (eachTaskField) {\n        eachTaskField.value = '';\n    }\n\n    let dueDateField = document.getElementById('task-duedate');\n\n    if (dueDateField) {\n        dueDateField.value = '';\n    }\n\n    let descriptionField = document.getElementById('task-description');\n\n    if (descriptionField) {\n        descriptionField.value = '';\n    }\n\n    let priorityFields = document.getElementsByName('priority');\n\n    for (let i = 0; i < priorityFields.length; i++) {\n        priorityFields[i].checked = false;\n    }\n\n    // returns the status dropdown and makes its selected index the first option which is blank\n    let statusSelect = document.getElementById('status-dropdown');\n\n    if (statusSelect) {\n        statusSelect.selectedIndex = 0;\n    }\n\n    // adds an event listener to the delete task button that straight switches the layout to two panes after a new task is created\n    addEventListenerUtility('#delete-task', 'click', switchToTwoPanes);\n}\n\n\n// DOM function - gathers input data\nfunction gatherTaskInputs() {\n\n    // retrieves user inputs from their respective DOM elements, and returns an object containing all these values\n    return {\n    taskTitle: document.getElementById('each-task').value.trim(),\n    taskDueDate: document.getElementById('task-duedate').value.trim(),\n    taskDescription: document.getElementById('task-description').value.trim(),\n    taskStatus: document.getElementById('status-dropdown').value,\n    priorityLevel: document.querySelector('input[type=\"radio\"][name=\"priority\"]:checked') ? document.querySelector('input[type=\"radio\"][name=\"priority\"]:checked').nextElementSibling.textContent.trim().toLowerCase() : ''\n    };\n}\n\n\n// data function - creates task data from inputs\nfunction prepareAndCreateTaskData(inputs, listAttributesData, fieldAttributesData, container) {\n\n    // checks if any of the fields are missing or blank\n    if (!inputs.taskTitle || !inputs.taskDueDate || !inputs.taskDescription || !inputs.taskStatus || !inputs.priorityLevel) {\n        alert(\"One or more inputs are blank or not selected.\");\n\n        appendTasksTitleAndList(selectedProjectData, listAttributesData, fieldAttributesData, container);\n\n        return;\n    }\n\n    switchToTwoPanes();\n\n    // converts task due date into a Date object and formats it into a more readable string\n    const date = new Date(inputs.taskDueDate + 'T00:00:00');\n    const formattedDueDate = `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;\n\n    // returns a new task object with keys matching a structured task data format\n    return {\n        'task-title': inputs.taskTitle,\n        'task-duedate': formattedDueDate,\n        'task-description': inputs.taskDescription,\n        'priority-level': inputs.priorityLevel,\n        'status': inputs.taskStatus,\n        'task-edit': \"Edit\",\n    };\n}\n\n\n// finds the last numeric task id\nfunction findLastNumericTaskId(projectData) {\n\n    let lastNumericTaskId;\n\n    // extracts the keys of the projectData\n    const taskIds = Object.keys(projectData);\n\n    const containsNumericKeys = taskIds.some(key => /^\\d+$/.test(key));\n\n    if (!containsNumericKeys) {\n\n        lastNumericTaskId = null;\n\n        return lastNumericTaskId;\n    } else {\n\n        // filter keys to remove non-numeric ones, and convert to numbers\n        const numericTaskIds = taskIds.filter(taskId => !isNaN(taskId)).map(Number);\n\n        // find the max value among numeric keys\n        let lastNumericTaskId = Math.max(...numericTaskIds);\n\n        return lastNumericTaskId;\n    }\n}\n\n\n// data function - updates projectData structure\nfunction prepareAndCreateTaskInProjectData(projectData, listAttributesData, fieldAttributesData, container) {\n\n    // collect form input data\n    const inputs = gatherTaskInputs();\n\n    // creates a structured task object from these inputs\n    const taskData = prepareAndCreateTaskData(inputs, listAttributesData, fieldAttributesData, container);\n\n    if (taskData) {\n        // if editing an existing task\n        if (editingTaskId !== null) {\n\n            // updates the corresponding task in project data with the newly created task object\n            projectData[editingTaskId] = taskData;\n\n            // gets the project key of the project in projectMapping that matches the projectData name\n            let projectKey = findProjectKeyByProjectText(projectData['Project'].text);\n\n            let projectMapping = loadDataFromLocalStorage('projectMapping');\n\n            // updates projectMapping with the lastest projectData under this formatted project name\n            projectMapping[projectKey] = projectData;\n    \n            saveDataToLocalStorage('projectMapping', projectMapping);\n\n        // if creating a new task\n        } else {\n\n            // gets a new task id by getting the length of keys in projectData and decrementing by 1\n            let newTaskId = findLastNumericTaskId(projectData);\n\n            if (newTaskId !== null) {\n                newTaskId = (Number(newTaskId) + 1).toString();\n            } else {\n                newTaskId = '0';\n            }\n\n            // adds the new taskData object to projectData using the new id\n            projectData[newTaskId] = taskData;\n\n            // gets the project key of the project in projectMapping that matches the projectData name\n            let projectKey = findProjectKeyByProjectText(projectData['Project'].text);\n\n            let projectMapping = loadDataFromLocalStorage('projectMapping');\n\n            // updates projectMapping with the lastest projectData under this formatted project name\n            projectMapping[projectKey] = projectData;\n\n            saveDataToLocalStorage('projectMapping', projectMapping);\n        }\n\n        return projectData;\n    }\n}\n\n\n\n// DOM function - ties project data creation and project data DOM manipulation steps\nfunction appendTask(projectData, listAttributesData, fieldAttributesData, container) {\n\n    // retrieves a link element for a stylesheet \n    let stylesheet = document.getElementById('stylesheetToSwitch');\n\n    // checks if the current stylesheet has three panes\n    if (stylesheet.href.endsWith('style.css')) { \n\n        // updates projectData structure\n        let workingProjectData = prepareAndCreateTaskInProjectData(projectData, listAttributesData, fieldAttributesData, container);\n\n        // creates elements for the tasks project title and tasks list \n        appendTasksTitleAndList(workingProjectData, listAttributesData, fieldAttributesData, container);\n    }\n}\n\n\n// DOM function - sets up an event listener to manage selecting a project from a list\nfunction selectProject(listAttributesData, fieldAttributesData, container) {\n\n    document.querySelector('#content').addEventListener('click', function(event) {\n\n        // uses the closest method to find the target li element\n        const projectItem = event.target.closest('li');\n\n        // if a projectItem is found, converts the classList of projectItem into an array \n        if (projectItem) {\n\n            // classList property returns a live DOMTokenList of all classes on the element and Array.from converts this list into a regular array\n            const classListArray = Array.from(projectItem.classList);\n\n            // searches the array of class names to find the first class that starts with the letter p\n            const projectIndexClass = classListArray.find(className => className.startsWith('p'));\n\n            // if a class name starting with p was found, extracts substring from projectIndexClass starting from the second character to the end, the number\n            if (projectIndexClass) {\n                const projectIndex = projectIndexClass.substring(1);\n\n                // handles logic for selecting a project based on its index\n                selectProjectByIndex(projectIndex, listAttributesData, fieldAttributesData, container); \n            }\n        }\n    });\n}\n \n\n// DOM function - selects a project based on a given index from a list\nfunction selectProjectByIndex(projectIndex, listAttributesData, fieldAttributesData, container) {\n\n    let projectMapping = loadDataFromLocalStorage('projectMapping');\n    let projectsListText = loadDataFromLocalStorage('projectsListText');\n\n    // finds the first DOM element that matches the class .p{projectIndex} \n    const projectTitleDiv = document.querySelector(`.p${projectIndex}`);\n\n    // if the element exists, adjusts the UI to display two panes\n    if (projectTitleDiv) {\n        switchToTwoPanes();\n\n        /* checks if projectMapping is non-null and retrieves the project data using the key Project{projectIndex} \n           if projectMapping is null, gets the data from projectsListText using a similar key format */\n        selectedProjectData = projectMapping ? projectMapping[`Project${projectIndex}`] : projectsListText[`p${projectIndex}`];\n\n        // populates the UI with tasks and title details related to the selected project\n        appendTasksTitleAndList(selectedProjectData, listAttributesData, fieldAttributesData, container);\n\n        return selectedProjectData;\n    }\n}\n\n\n\n\n\n//# sourceURL=webpack://todo-list/./src/page_load.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;